from __future__ import annotations

import os
from typing import Optional

from .image import ImageAdapter
from ..cache import FileCache, compute_cache_key


class StabilityImageAdapter(ImageAdapter):
    """Adapter for Stability.ai image generation (Stable Diffusion).
    
    Uses the stability-sdk to generate images via Stable Diffusion models.
    Supports multiple models (SDXL, SD 1.5, etc.) and includes caching.
    
    Configuration via environment variables:
    - STABILITY_API_KEY: API key (required)
    - STABILITY_ENGINE: Engine/model to use (default: stable-diffusion-xl-1024-v1-0)
    """
    
    def __init__(
        self,
        api_key: Optional[str] = None,
        engine: Optional[str] = None,
        cache_enabled: bool = True,
    ):
        self.api_key = api_key or os.getenv("STABILITY_API_KEY")
        self.engine = engine or os.getenv("STABILITY_ENGINE") or "stable-diffusion-xl-1024-v1-0"
        self.cache = FileCache(enabled=cache_enabled) if cache_enabled else None
    
    def generate_image(
        self,
        prompt: str,
        out_path: Optional[str] = None,
        width: int = 1024,
        height: int = 1024,
        steps: int = 30,
        seed: Optional[int] = None,
    ) -> str:
        """Generate an image using Stability.ai API.
        
        Args:
            prompt: Text description of the image
            out_path: Output file path (default: workspace/images/stability_{hash}.png)
            width: Image width (SDXL: 1024, SD 1.5: 512)
            height: Image height
            steps: Generation steps (more = better quality, slower)
            seed: Random seed for reproducibility
            
        Returns:
            Path to generated image file
        """
        # Check cache first
        cache_key = None
        if self.cache and self.cache.enabled:
            cache_data = {
                "prompt": prompt,
                "width": width,
                "height": height,
                "steps": steps,
                "seed": seed,
                "engine": self.engine,
                "provider": "stability",
            }
            cache_key = compute_cache_key(cache_data)
            cached_file = self.cache.get(cache_key, extension=".png")
            if cached_file:
                # Copy from cache to output path if specified
                if out_path and out_path != cached_file:
                    import shutil
                    os.makedirs(os.path.dirname(out_path) or ".", exist_ok=True)
                    shutil.copy(cached_file, out_path)
                    return out_path
                return cached_file
        
        # Not in cache - generate
        if not self.api_key:
            raise ValueError(
                "Stability API key is required. "
                "Set STABILITY_API_KEY environment variable."
            )
        
        try:
            import stability_sdk.interfaces.gooseai.generation.generation_pb2 as generation
            from stability_sdk import client
        except ImportError:
            raise ImportError(
                "stability-sdk is required for StabilityImageAdapter. "
                "Install it with: pip install stability-sdk"
            )
        
        # Create API client
        stability_api = client.StabilityInference(
            key=self.api_key,
            engine=self.engine,
        )
        
        # Generate image
        answers = stability_api.generate(
            prompt=prompt,
            width=width,
            height=height,
            steps=steps,
            seed=seed or 0,
            cfg_scale=7.0,  # How strictly to follow prompt
            samples=1,
        )
        
        # Extract image from response
        image_data = None
        for resp in answers:
            for artifact in resp.artifacts:
                if artifact.type == generation.ARTIFACT_IMAGE:
                    image_data = artifact.binary
                    break
            if image_data:
                break
        
        if not image_data:
            raise RuntimeError("No image generated by Stability API")
        
        # Determine output path
        if not out_path:
            safe_hash = cache_key[:8] if cache_key else "image"
            out_path = f"workspace/images/stability_{safe_hash}.png"
        
        os.makedirs(os.path.dirname(out_path) or ".", exist_ok=True)
        
        # Write image
        with open(out_path, "wb") as f:
            f.write(image_data)
        
        # Store in cache
        if self.cache and self.cache.enabled and cache_key:
            self.cache.put(
                cache_key,
                out_path,
                extension=".png",
                metadata={
                    "prompt_length": len(prompt),
                    "width": width,
                    "height": height,
                    "steps": steps,
                    "engine": self.engine,
                }
            )
        
        return out_path
